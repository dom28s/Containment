import React, { useState, useEffect, useRef } from 'react';
import { Link } from 'react-router-dom';
import Transition from '../utils/Transition';

/**
 * ‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå Dropdown ‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
 * @param {string} name - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° Dropdown (‡πÄ‡∏ä‡πà‡∏ô "User Settings" ‡∏´‡∏£‡∏∑‡∏≠ "Actions")
 * @param {('left'|'right')} align - ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î Dropdown (left ‡∏´‡∏£‡∏∑‡∏≠ right)
 * @param {Array<{to: string, label: string, onClick?: () => void, icon?: JSX.Element}>} items - ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
 */
function SimpleGenericDropdown({
  name,
  align = 'right', // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ default ‡πÄ‡∏õ‡πá‡∏ô 'right'
  items 
}) {

  const [dropdownOpen, setDropdownOpen] = useState(false);
  const trigger = useRef(null);
  const dropdown = useRef(null);

  // Logic ‡∏õ‡∏¥‡∏î Dropdown (on click outside)
  useEffect(() => {
    const clickHandler = ({ target }) => {
      if (!dropdown.current) return;
      if (!dropdownOpen || dropdown.current.contains(target) || trigger.current.contains(target)) return;
      setDropdownOpen(false);
    };
    document.addEventListener('click', clickHandler);
    return () => document.removeEventListener('click', clickHandler);
  });

  // Logic ‡∏õ‡∏¥‡∏î Dropdown (on Esc key press)
  useEffect(() => {
    const keyHandler = ({ keyCode }) => {
      if (!dropdownOpen || keyCode !== 27) return;
      setDropdownOpen(false);
    };
    document.addEventListener('keydown', keyHandler);
    return () => document.removeEventListener('keydown', keyHandler);
  });

  // ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢ (Default Ellipsis/Kebab icon)
  const DefaultIcon = (
    <svg className="w-4 h-4 fill-current text-gray-500/80 dark:text-gray-400/80" viewBox="0 0 16 16">
      <path d="M7 14c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zM7 7c-1.1 0-2-.9-2-2s.9-2 2-2 2 .9 2 2-.9 2-2 2zM7 0C5.9 0 5 .9 5 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z" />
    </svg>
  );

//... ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏ô (Imports, Hooks, Logic ‡∏ï‡πà‡∏≤‡∏á‡πÜ) ...

// ‡∏•‡∏ö DefaultIcon ‡∏≠‡∏≠‡∏Å ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏≠‡∏∑‡πà‡∏ô

//... ‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á return (JSX) ...

  // üü¢ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡∏õ‡∏∏‡πà‡∏° üü¢
  return (
    <div className="relative inline-flex">
      <button
        ref={trigger}
        // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏•‡∏≤‡∏™: ‡∏•‡∏ö w-8 h-8 ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° padding ‡πÅ‡∏•‡∏∞‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        className={`flex items-center justify-center 
          bg-[#111827] border border-[#0ea5e9] rounded-md px-3 py-1 text-sm text-white 
          focus:ring-1 focus:ring-[#0ea5e9] hover:border-violet-500 
          ${dropdownOpen && 'ring-1 ring-[#0ea5e9]'}`} // ‡∏™‡πÑ‡∏ï‡∏•‡πå‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î
        aria-haspopup="true"
        onClick={() => setDropdownOpen(!dropdownOpen)}
        aria-expanded={dropdownOpen}
      >
        <span className="truncate">{name}</span> {/* ‡πÅ‡∏™‡∏î‡∏á name ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤ */}
        
        {/* üü¢ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏•‡∏π‡∏Å‡∏®‡∏£ Dropdown üü¢ */}
        <svg 
          className="w-3 h-3 fill-current ml-1.5 text-gray-400 shrink-0" 
          viewBox="0 0 12 12" 
          xmlns="http://www.w3.org/2000/svg"
        >
          <path d="M5.4 6L3.9 4.5 4.5 3.9 6 5.4 7.5 3.9 8.1 4.5 6.6 6 8.1 7.5 7.5 8.1 6 6.6 4.5 8.1 3.9 7.5z" />
        </svg>

      </button>

      {/* üü¢ ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡πÑ‡∏ï‡∏•‡πå Dropdown List üü¢ */}
      <Transition
        className={`origin-top-left z-10 absolute top-full min-w-44 bg-gray-900 border border-gray-700/60 py-1.5 rounded-lg shadow-lg overflow-hidden mt-1 
          ${align === 'right' ? 'right-0' : 'left-0'}`} // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô bg/border ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Dark Mode ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö
        show={dropdownOpen}
        //... (Transition Props ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ...
      >
        <div
          ref={dropdown}
          onFocus={() => setDropdownOpen(true)}
          onBlur={() => setDropdownOpen(false)}
        >
          {/* ‡∏•‡∏ö Title/Name Header ‡∏´‡∏£‡∏∑‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö Dark Mode */}
          {/* <div className="text-xs font-semibold text-gray-400 dark:text-gray-500 uppercase pt-1.5 pb-2 px-3">{name}</div> */}
          
          <ul>
            {items.map((item, index) => (
              <li key={index}>
                <Link
                  // ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö Dark Mode (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
                  className="font-medium text-sm text-white hover:text-[#0ea5e9] flex items-center py-1 px-3 bg-gray-900 hover:bg-gray-800"
                  to={item.to}
                  onClick={(e) => {
                    setDropdownOpen(false);
                    if (item.onClick) {
                      e.preventDefault(); 
                      item.onClick();
                    }
                  }}
                >
                  {item.icon}
                  <span>{item.label}</span>
                </Link>
              </li>
            ))}
          </ul>
        </div>
      </Transition>
    </div>
  )
}

export default DropdownGeneral;