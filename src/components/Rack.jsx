/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 rack.gltf 
Author: Vertiv (https://sketchfab.com/vertiv)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/vr3100-42u-11b3b6c30a474ddda260bdc4bb96c59e
Title: VR3100 42U
*/

import React, { useState } from 'react'
import { useGLTF } from '@react-three/drei'
import * as THREE from 'three';

// กำหนดสี
const HIGHLIGHT_COLOR = 'green';
// วัสดุพื้นฐานที่ใช้เมื่อมีการไฮไลท์
const highlightMaterial = new THREE.MeshStandardMaterial({ color: HIGHLIGHT_COLOR });


export default function RackModel(props) {
  const { nodes, materials } = useGLTF('/rack.gltf')
  
  // 1. State: เก็บชื่อของ Mesh ที่ถูกคลิก (เช่น 'Object_4')
  const [highlightedMesh, setHighlightedMesh] = useState(null);

  /**
   * ฟังก์ชันจัดการการคลิก
   * @param {object} event - Event object จาก React Three Fiber
   * @param {string} name - ชื่อ Mesh ที่กำหนด (e.g., 'Object_4')
   */
  const handleClick = (event, name) => {
    // หยุด event ไม่ให้ propagate ไปยัง Mesh อื่นๆ ที่ซ้อนทับกัน
    event.stopPropagation(); 
    
    // 2. สลับ State: ถ้าคลิกซ้ำให้ปิดไฮไลท์ (null) ถ้าคลิกชิ้นใหม่ให้ตั้งชื่อชิ้นใหม่
    setHighlightedMesh(prev => prev === name ? null : name);
    
    console.log(`Clicked Mesh: ${name}. Current Highlight: ${highlightedMesh === name ? 'Off' : 'On'}`);
  };
  
  /**
   * ฟังก์ชันช่วยในการ Render Mesh
   * @param {string} name - ชื่อ Mesh Node
   * @param {string} defaultMaterial - วัสดุเริ่มต้นที่โหลดมา
   * @returns JSX element
   */
  const renderMesh = (name, defaultMaterial) => {
      // 3. ตรวจสอบเงื่อนไข: หาก Mesh นี้คือ Mesh ที่ถูกไฮไลท์ 
      const isHighlighted = highlightedMesh === name;

      return (
          <mesh 
              key={name}
              geometry={nodes[name].geometry} 
              // ถ้าถูกไฮไลท์ ให้ใช้วัสดุสีเขียว มิฉะนั้นให้ใช้วัสดุเดิม
              material={isHighlighted ? highlightMaterial : defaultMaterial} 
              onClick={(e) => handleClick(e, name)}
              castShadow // เพิ่มเพื่อให้เห็นความลึก
              receiveShadow // เพิ่มเพื่อให้รับเงาได้
          />
      );
  };

  return (
    <group {...props} dispose={null}>
      <group rotation={[-Math.PI / 2, 0, 0]} scale={0.939}>
        <group rotation={[Math.PI / 2, 0, 0]}>
          
          {/* ทำให้ชิ้นส่วนหลักสามารถคลิกได้และเปลี่ยนสี */}
          {renderMesh('Object_4', materials.BaseMaterials)}
          {renderMesh('Object_6', materials.VR3100_Decals)}
          {renderMesh('Object_7', materials.BaseMaterials)}
          {renderMesh('Object_9', materials.VR3100_Grid)}
          
        </group>
      </group>
    </group>
  )
}

useGLTF.preload('/rack.gltf')
